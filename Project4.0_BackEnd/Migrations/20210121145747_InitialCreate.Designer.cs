// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Project4._0_BackEnd.Data;

namespace Project4._0_BackEnd.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20210121145747_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Project4._0_BackEnd.Models.Box", b =>
                {
                    b.Property<int>("BoxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("MacAddress")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("BoxID");

                    b.ToTable("Box");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.BoxUser", b =>
                {
                    b.Property<int>("BoxUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BoxID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("BoxUserID");

                    b.HasIndex("BoxID");

                    b.HasIndex("UserID");

                    b.ToTable("BoxUser");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BoxUserID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LocationID");

                    b.HasIndex("BoxUserID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.Measurement", b =>
                {
                    b.Property<int>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BoxID")
                        .HasColumnType("integer");

                    b.Property<int>("SensorID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("MeasurementID");

                    b.HasIndex("BoxID", "SensorID");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.Monitoring", b =>
                {
                    b.Property<int>("MonitoringID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("BatteryPercentage")
                        .HasColumnType("double precision");

                    b.Property<bool>("BatteryStatus")
                        .HasColumnType("boolean");

                    b.Property<int>("BoxID")
                        .HasColumnType("integer");

                    b.Property<double>("SDCapacity")
                        .HasColumnType("double precision");

                    b.HasKey("MonitoringID");

                    b.HasIndex("BoxID");

                    b.ToTable("Monitoring");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.Sensor", b =>
                {
                    b.Property<int>("SensorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SensorTypeID")
                        .HasColumnType("integer");

                    b.HasKey("SensorID");

                    b.HasIndex("SensorTypeID");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.SensorBox", b =>
                {
                    b.Property<int>("BoxID")
                        .HasColumnType("integer");

                    b.Property<int>("SensorID")
                        .HasColumnType("integer");

                    b.HasKey("BoxID", "SensorID");

                    b.HasIndex("SensorID");

                    b.ToTable("SensorBox");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.SensorType", b =>
                {
                    b.Property<int>("SensorTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("SensorTypeID");

                    b.ToTable("Sensortype");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("integer");

                    b.HasKey("UserID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("UserTypeName")
                        .HasColumnType("text");

                    b.HasKey("UserTypeID");

                    b.ToTable("Usertype");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.BoxUser", b =>
                {
                    b.HasOne("Project4._0_BackEnd.Models.Box", "Box")
                        .WithMany("BoxUsers")
                        .HasForeignKey("BoxID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_BackEnd.Models.User", "User")
                        .WithMany("BoxUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.Location", b =>
                {
                    b.HasOne("Project4._0_BackEnd.Models.BoxUser", "BoxUser")
                        .WithMany("Locations")
                        .HasForeignKey("BoxUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxUser");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.Measurement", b =>
                {
                    b.HasOne("Project4._0_BackEnd.Models.SensorBox", "SensorBox")
                        .WithMany("Measurements")
                        .HasForeignKey("BoxID", "SensorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorBox");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.Monitoring", b =>
                {
                    b.HasOne("Project4._0_BackEnd.Models.Box", "Box")
                        .WithMany("Monitorings")
                        .HasForeignKey("BoxID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.Sensor", b =>
                {
                    b.HasOne("Project4._0_BackEnd.Models.SensorType", "SensorType")
                        .WithMany()
                        .HasForeignKey("SensorTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorType");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.SensorBox", b =>
                {
                    b.HasOne("Project4._0_BackEnd.Models.Box", "Box")
                        .WithMany("SensorBoxes")
                        .HasForeignKey("BoxID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_BackEnd.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.User", b =>
                {
                    b.HasOne("Project4._0_BackEnd.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.Box", b =>
                {
                    b.Navigation("BoxUsers");

                    b.Navigation("Monitorings");

                    b.Navigation("SensorBoxes");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.BoxUser", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.SensorBox", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Project4._0_BackEnd.Models.User", b =>
                {
                    b.Navigation("BoxUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
